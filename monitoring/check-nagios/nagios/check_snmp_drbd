#!/usr/bin/perl -w
use strict;
use Net::SNMP;
use Getopt::Long;

my $oid = ".1.3.6.1.4.1.1000.1";

my %ERRORS=('OK'=>0,'WARNING'=>1,'CRITICAL'=>2,'UNKNOWN'=>3,'DEPENDENT'=>4);
my ($snmp_resources, $snmp_values);
my (@resources, @values);
my (@tmp, @tmp2, $tmp3);
my ($key, $value);
my $hostname = "";
my $community = "";
my %status = ();
my $i;
my $x;
my $error;

my $session;
my $o_verb=     undef;

# Get the command line options
# only "-h Hostname"
Getopt::Long::Configure ("bundling");
GetOptions(
	'v'     => \$o_verb,
	'h=s' => \$hostname,
	'c=s' => \$community);

if ($hostname eq "" or $community eq "") {
	print "No host define\nUsage : $0 -h <hostname> -c <community>\n";
	exit $ERRORS{"CRITICAL"};
}

# For verbose output
sub verb { my $t=shift; print $t,"\n" if defined($o_verb) ; }

my $port = 161;
my $timeout = 5;

($session, $error) = Net::SNMP->session(
	-hostname  => $hostname,
	-version   => 2,
	-community => $community,
	-port      => $port,
	-timeout   => $timeout
);


my $resultat = (Net::SNMP->VERSION < 4) ? 
	$session->get_table($oid)
	: $session->get_table(Baseoid => $oid);

if (!defined($resultat)) {
   printf("ERROR: Description table : %s.\n", $session->error);
   $session->close;
   exit $ERRORS{"UNKNOWN"};
}
$session->close;

my @load = undef;
my @iload = undef;
my @tabOid= undef;
my $version = "";
foreach my $key ( keys %$resultat) {
    $i = $key;
    $i =~ s/$oid\.//g;
    my @theKey = split(/\./, $i);
    if ( $theKey[0] != 0 ){
        $tabOid[$theKey[0]][$theKey[1]] = $$resultat{$key}; 
        verb("OID : $i, Desc : $$resultat{$key}");
    }else{
        $version = $$resultat{$key};
    }
}


my $warning = 0;
my $critical = 0;
my $nbrDisk = 0;
# Check for "Primary"
foreach my $row (@tabOid) {
    if( defined ($row)){
        my $disk = $row;
	if ( @$disk[2] eq "Secondary") {
	    $warning = $warning + 1;
        } elsif( (!(@$disk[2] eq "Primary") or !(@$disk[1] eq "Connected")) and @$disk[1] ne "Unconfigured" ) {
	    $critical = $critical + 1;
	} elsif ( !(@$disk[1] eq "Unconfigured") ) {
	    $nbrDisk = $nbrDisk + 1;
	}
    }
}

# Send out status
if ($warning > 0) {
	print $version . " : ". $warning ." disks secondary\n";
	exit $ERRORS{"WARNING"};
} elsif ($critical > 0 ) {
	print $version . " : ". $critical ." disks critical\n";
	exit $ERRORS{"CRITICAL"};
} elsif ($warning == 0 and $critical == 0 and $nbrDisk == 0){
	print "ERROR: Description table error\n";
	exit $ERRORS{"UNKNOWN"};
} else {
	print $version . " : ". $nbrDisk . " disks OK\n";
	exit $ERRORS{"OK"};
}
